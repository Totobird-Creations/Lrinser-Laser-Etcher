{"message":"conflicting implementations of trait `std::ops::Mul<&_>` for type `geometry::translation::Translation<_, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1596,"byte_end":1919,"line_start":67,"line_end":76,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":9,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":2248,"byte_end":2377,"line_start":87,"line_end":90,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        isometry_binop_impl!(","highlight_start":9,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":54},{"text":"            $action_val_val; );","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":8731,"byte_end":9080,"line_start":281,"line_end":288,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"isometry_binop_impl_all!(","highlight_start":1,"highlight_end":26},{"text":"    Mul, mul;","highlight_start":1,"highlight_end":14},{"text":"    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;","highlight_start":1,"highlight_end":67},{"text":"    [val val] => Isometry::from_parts(self, right);","highlight_start":1,"highlight_end":52},{"text":"    [ref val] => Isometry::from_parts(self.clone(), right);","highlight_start":1,"highlight_end":60},{"text":"    [val ref] => Isometry::from_parts(self, right.clone());","highlight_start":1,"highlight_end":60},{"text":"    [ref ref] => Isometry::from_parts(self.clone(), right.clone());","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"isometry_binop_impl_all!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1930,"byte_end":2829,"line_start":80,"line_end":107,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl_all(","highlight_start":1,"highlight_end":38},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     [val val] => $action_val_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref val] => $action_ref_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [val ref] => $action_val_ref: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref ref] => $action_ref_ref: expr;) => {","highlight_start":1,"highlight_end":47},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":54},{"text":"            $action_val_val; );","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_ref_val; 'a);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_val_ref; 'b);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":62},{"text":"            $action_ref_ref; 'a, 'b);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"isometry_binop_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1410,"byte_end":1928,"line_start":63,"line_end":78,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl(","highlight_start":1,"highlight_end":34},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     $action: expr; $($lives: tt),*) => {","highlight_start":1,"highlight_end":42},{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":1,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1596,"byte_end":1919,"line_start":67,"line_end":76,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":9,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"conflicting implementation for `geometry::translation::Translation<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":2532,"byte_end":2667,"line_start":97,"line_end":100,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        isometry_binop_impl!(","highlight_start":9,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_val_ref; 'b);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":8731,"byte_end":9080,"line_start":281,"line_end":288,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"isometry_binop_impl_all!(","highlight_start":1,"highlight_end":26},{"text":"    Mul, mul;","highlight_start":1,"highlight_end":14},{"text":"    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;","highlight_start":1,"highlight_end":67},{"text":"    [val val] => Isometry::from_parts(self, right);","highlight_start":1,"highlight_end":52},{"text":"    [ref val] => Isometry::from_parts(self.clone(), right);","highlight_start":1,"highlight_end":60},{"text":"    [val ref] => Isometry::from_parts(self, right.clone());","highlight_start":1,"highlight_end":60},{"text":"    [ref ref] => Isometry::from_parts(self.clone(), right.clone());","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"isometry_binop_impl_all!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1930,"byte_end":2829,"line_start":80,"line_end":107,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl_all(","highlight_start":1,"highlight_end":38},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     [val val] => $action_val_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref val] => $action_ref_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [val ref] => $action_val_ref: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref ref] => $action_ref_ref: expr;) => {","highlight_start":1,"highlight_end":47},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":54},{"text":"            $action_val_val; );","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_ref_val; 'a);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_val_ref; 'b);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":62},{"text":"            $action_ref_ref; 'a, 'b);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"isometry_binop_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1410,"byte_end":1928,"line_start":63,"line_end":78,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl(","highlight_start":1,"highlight_end":34},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     $action: expr; $($lives: tt),*) => {","highlight_start":1,"highlight_end":42},{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":1,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"downstream crates may implement trait `alga::linear::Rotation<geometry::point::Point<_, _>>` for type `&_`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `std::ops::Mul<&_>` for type `geometry::translation::Translation<_, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs:67:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            where R: AlgaRotation<Point<N, D>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                  DefaultAllocator: Allocator<N, D> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            type Output = $Output;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `geometry::translation::Translation<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0misometry_binop_impl_all!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Mul, mul;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    [val val] => Isometry::from_parts(self, right);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    [ref ref] => Isometry::from_parts(self.clone(), right.clone());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: downstream crates may implement trait `alga::linear::Rotation<geometry::point::Point<_, _>>` for type `&_`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"conflicting implementations of trait `std::ops::Mul<&_>` for type `&geometry::translation::Translation<_, _>`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1596,"byte_end":1919,"line_start":67,"line_end":76,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":9,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":2387,"byte_end":2522,"line_start":92,"line_end":95,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        isometry_binop_impl!(","highlight_start":9,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_ref_val; 'a);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":8731,"byte_end":9080,"line_start":281,"line_end":288,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"isometry_binop_impl_all!(","highlight_start":1,"highlight_end":26},{"text":"    Mul, mul;","highlight_start":1,"highlight_end":14},{"text":"    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;","highlight_start":1,"highlight_end":67},{"text":"    [val val] => Isometry::from_parts(self, right);","highlight_start":1,"highlight_end":52},{"text":"    [ref val] => Isometry::from_parts(self.clone(), right);","highlight_start":1,"highlight_end":60},{"text":"    [val ref] => Isometry::from_parts(self, right.clone());","highlight_start":1,"highlight_end":60},{"text":"    [ref ref] => Isometry::from_parts(self.clone(), right.clone());","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"isometry_binop_impl_all!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1930,"byte_end":2829,"line_start":80,"line_end":107,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl_all(","highlight_start":1,"highlight_end":38},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     [val val] => $action_val_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref val] => $action_ref_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [val ref] => $action_val_ref: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref ref] => $action_ref_ref: expr;) => {","highlight_start":1,"highlight_end":47},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":54},{"text":"            $action_val_val; );","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_ref_val; 'a);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_val_ref; 'b);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":62},{"text":"            $action_ref_ref; 'a, 'b);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"isometry_binop_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1410,"byte_end":1928,"line_start":63,"line_end":78,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl(","highlight_start":1,"highlight_end":34},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     $action: expr; $($lives: tt),*) => {","highlight_start":1,"highlight_end":42},{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":1,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1596,"byte_end":1919,"line_start":67,"line_end":76,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":9,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"conflicting implementation for `&geometry::translation::Translation<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":2677,"byte_end":2820,"line_start":102,"line_end":105,"column_start":9,"column_end":38,"is_primary":false,"text":[{"text":"        isometry_binop_impl!(","highlight_start":9,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":62},{"text":"            $action_ref_ref; 'a, 'b);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":8731,"byte_end":9080,"line_start":281,"line_end":288,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"isometry_binop_impl_all!(","highlight_start":1,"highlight_end":26},{"text":"    Mul, mul;","highlight_start":1,"highlight_end":14},{"text":"    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;","highlight_start":1,"highlight_end":67},{"text":"    [val val] => Isometry::from_parts(self, right);","highlight_start":1,"highlight_end":52},{"text":"    [ref val] => Isometry::from_parts(self.clone(), right);","highlight_start":1,"highlight_end":60},{"text":"    [val ref] => Isometry::from_parts(self, right.clone());","highlight_start":1,"highlight_end":60},{"text":"    [ref ref] => Isometry::from_parts(self.clone(), right.clone());","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"isometry_binop_impl_all!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1930,"byte_end":2829,"line_start":80,"line_end":107,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl_all(","highlight_start":1,"highlight_end":38},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     [val val] => $action_val_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref val] => $action_ref_val: expr;","highlight_start":1,"highlight_end":41},{"text":"     [val ref] => $action_val_ref: expr;","highlight_start":1,"highlight_end":41},{"text":"     [ref ref] => $action_ref_ref: expr;) => {","highlight_start":1,"highlight_end":47},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":54},{"text":"            $action_val_val; );","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_ref_val; 'a);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":58},{"text":"            $action_val_ref; 'b);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        isometry_binop_impl!(","highlight_start":1,"highlight_end":30},{"text":"            $Op, $op;","highlight_start":1,"highlight_end":22},{"text":"            $lhs: &'a $Lhs, $rhs: &'b $Rhs, Output = $Output;","highlight_start":1,"highlight_end":62},{"text":"            $action_ref_ref; 'a, 'b);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"isometry_binop_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs","byte_start":1410,"byte_end":1928,"line_start":63,"line_end":78,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! isometry_binop_impl(","highlight_start":1,"highlight_end":34},{"text":"    ($Op: ident, $op: ident;","highlight_start":1,"highlight_end":29},{"text":"     $lhs: ident: $Lhs: ty, $rhs: ident: $Rhs: ty, Output = $Output: ty;","highlight_start":1,"highlight_end":73},{"text":"     $action: expr; $($lives: tt),*) => {","highlight_start":1,"highlight_end":42},{"text":"        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs","highlight_start":1,"highlight_end":69},{"text":"            where R: AlgaRotation<Point<N, D>>,","highlight_start":1,"highlight_end":48},{"text":"                  DefaultAllocator: Allocator<N, D> {","highlight_start":1,"highlight_end":54},{"text":"            type Output = $Output;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn $op($lhs, $rhs: $Rhs) -> Self::Output {","highlight_start":1,"highlight_end":55},{"text":"                $action","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"downstream crates may implement trait `alga::linear::Rotation<geometry::point::Point<_, _>>` for type `&_`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `std::ops::Mul<&_>` for type `&geometry::translation::Translation<_, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.13.1/src/geometry/isometry_ops.rs:67:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($lives ,)* N: Real, D: DimName, R> $Op<$Rhs> for $Lhs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            where R: AlgaRotation<Point<N, D>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                  DefaultAllocator: Allocator<N, D> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            type Output = $Output;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `&geometry::translation::Translation<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0misometry_binop_impl_all!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Mul, mul;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    self: Translation<N, D>, right: R, Output = Isometry<N, D, R>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    [val val] => Isometry::from_parts(self, right);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    [ref ref] => Isometry::from_parts(self.clone(), right.clone());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: downstream crates may implement trait `alga::linear::Rotation<geometry::point::Point<_, _>>` for type `&_`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0119`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0119`.\u001b[0m\n"}
